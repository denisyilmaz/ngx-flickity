{"version":3,"sources":["../../src/services/app-config.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sCAAgE;AAChE,0CAAmD;AAGnD;IAEE,0BAAyC,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;IAAG,CAAC;IAG/D,sBAAI,8CAAgB;aAApB;YACE,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,iBAAiB,GAAG,yBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAC5D,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAA;QAC/B,CAAC;;;OAAA;IAVU,gBAAgB;QAD5B,iBAAU,EAAE;QAGE,WAAA,aAAM,CAAC,kBAAW,CAAC,CAAA;yCAAqB,MAAM;OAFhD,gBAAgB,CAW5B;IAAD,uBAAC;CAXD,AAWC,IAAA;AAXY,4CAAgB","file":"app-config.service.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class AppConfigService {\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n\n  _isPlatformServer:boolean\n  get isPlatformServer() {\n    if(!this._isPlatformServer) {\n      this._isPlatformServer = isPlatformServer(this.platformId)\n    }\n    return this._isPlatformServer\n  }\n}\n"]}