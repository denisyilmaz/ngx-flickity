{"version":3,"sources":["../../../src/components/flickity/flickity.directive.ts"],"names":[],"mappings":";;;;;;;;;;;AAEA,sCAEuB;AAGvB,wEAAqE;AAGrE;IAaE,2BAAoB,EAAc,EACd,gBAAkC;QADlC,OAAE,GAAF,EAAE,CAAY;QACd,qBAAgB,GAAhB,gBAAgB,CAAkB;QAZnC,WAAM,GAAoB,EAAE,CAAC;QACtC,gBAAW,GAAG,IAAI,mBAAY,EAAU,CAAC;QACzC,oBAAe,GAAG,IAAI,mBAAY,EAAU,CAAC;QAC7C,oBAAe,GAAG,IAAI,mBAAY,EAAQ,CAAC;QAG7C,mBAAc,GAAkB,EAAE,CAAC;QAEnC,2BAAsB,GAAG,GAAG,CAAC;QAKvB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,aAAa,CAAA;IACzC,CAAC;IAEb,8CAAkB,GAAlB;QACE,eAAe;QACf,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,uCAAW,GAAX;QACE,kBAAkB;IACpB,CAAC;IAvBkB;QAAlB,YAAK,CAAC,UAAU,CAAC;;qDAA8B;IACtC;QAAT,aAAM,EAAE;;0DAA0C;IACzC;QAAT,aAAM,EAAE;;8DAA8C;IAC7C;QAAT,aAAM,EAAE;;8DAA4C;IAL1C,iBAAiB;QAD7B,gBAAS,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;yCAcZ,iBAAU;YACI,qCAAgB;OAd3C,iBAAiB,CAuK7B;IAAD,wBAAC;CAvKD,AAuKC,IAAA;AAvKY,8CAAiB","file":"flickity.directive.js","sourceRoot":"","sourcesContent":["declare let require: any;\n\nimport {\n  ElementRef, Directive, OnDestroy, Input, Output, EventEmitter, AfterContentInit\n} from '@angular/core';\n\nimport { FlickityOptions } from \"../../interfaces/flickity-options.interface\";\nimport { AppConfigService } from '../../services/app-config.service';\n\n@Directive({ selector: '[flickity]' })\nexport class FlickityDirective implements AfterContentInit, OnDestroy {\n\n  @Input('flickity') config: FlickityOptions = {};\n  @Output() slideSelect = new EventEmitter<number>();\n  @Output() cellStaticClick = new EventEmitter<number>();\n  @Output() childrenUpdated = new EventEmitter<void>();\n\n  private flkty: any;\n  private appendElements: HTMLElement[] = [];\n  private childrenUpdate;\n  private childrenUpdateInterval = 300;\n  private flickityElement: HTMLElement;\n  \n  constructor(private el: ElementRef,\n              private appConfigService: AppConfigService) {\n                this.flickityElement = el.nativeElement\n              }\n\n  ngAfterContentInit(): void {\n    // this.init();\n    console.log('HI');\n  }\n\n  ngOnDestroy(): void {\n    // this.destroy();\n  }\n\n  // init() {\n  //   if (this.appConfigService.isPlatformServer || !this.flickityElement) {\n  //     return;\n  //   }\n\n  //   const Flickity = require('flickity');\n\n  //   let config = this.config;\n\n  //   if (this.flkty) {\n  //     config['initialIndex'] = this.flkty.selectedIndex;\n  //     this.destroy();\n  //   }\n\n  //   this.flkty = new Flickity(this.flickityElement, config);\n\n  //   this.flkty.on('select', () => {\n  //     this.slideSelect.emit(this.selectedIndex);\n  //   });\n\n  //   this.flkty.on('staticClick', (_event: any, _pointer: any, _cellElement: any, cellIndex: any) => {\n  //     this.cellStaticClick.emit(cellIndex);\n  //   });\n\n  //   this.updateElements();\n\n  //   setTimeout(() => this.resize(), this.childrenUpdateInterval);\n  // }\n\n  // destroy() {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   if (this.childrenUpdate) {\n  //     clearInterval(this.childrenUpdate);\n  //     this.childrenUpdate = undefined;\n  //   }\n\n  //   this.flkty.destroy();\n  // }\n\n  // resize() {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   this.flkty.resize();\n  // }\n\n  // reposition() {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   this.flkty.reposition();\n  // }\n\n  // previous() {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   this.flkty.previous();\n  // }\n\n  // previousAvailable(): boolean {\n  //   if (this.selectedIndex === undefined) {\n  //     return false;\n  //   }\n\n  //   return this.selectedIndex > 0;\n  // }\n\n  // next() {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   this.flkty.next();\n  // }\n\n  // nextAvailable(): boolean {\n  //   if (this.selectedIndex === undefined || !this.slides) {\n  //     return false;\n  //   }\n\n  //   return this.selectedIndex < this.slides - 1;\n  // }\n\n  // get selectedIndex(): number {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   return this.flkty.selectedIndex;\n  // }\n\n  // get cells(): number {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   return this.flkty.cells.length;\n  // }\n\n  // get slides(): number {\n  //   if (!this.flkty) {\n  //     return;\n  //   }\n\n  //   return this.flkty['slides'].length;\n  // }\n\n  // append(el: HTMLElement) {\n  //   this.appendElements.push(el);\n  // }\n\n  // prepend(el: HTMLElement) {\n  //   this.flkty.prepend(el);\n  // }\n\n  // private updateElements() {\n  //   if (!this.flkty || this.appendElements.length == 0) {\n  //     return;\n  //   }\n\n  //   this.appendElements.forEach(el => {\n  //     this.flkty.append(el)\n  //   });\n  //   this.appendElements = [];\n\n  //   this.resize();\n  //   this.childrenUpdated.emit();\n  //   this.childrenUpdate = setTimeout(this.updateElements(), this.childrenUpdateInterval);\n  // }\n\n  // select(index: number, isWrapped = true, isInstant = false) {\n  //   this.flkty.select(index, isWrapped, isInstant);\n  // }\n}\n"]}